"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = __importStar(require("fs"));
var grpc = __importStar(require("grpc"));
var bchrpc = __importStar(require("../pb/bchrpc_pb"));
var bchrpc_grpc = __importStar(require("../pb/bchrpc_grpc_pb"));
var GrpcClient = /** @class */ (function () {
    function GrpcClient(url, rootCertPath) {
        if (url === void 0) { url = "bchd.greyh.at:8335"; }
        if (rootCertPath === void 0) { rootCertPath = null; }
        var creds = grpc.credentials.createSsl();
        if (rootCertPath) {
            var rootCert = fs.readFileSync(rootCertPath);
            creds = grpc.credentials.createSsl(rootCert);
        }
        this.client = new bchrpc_grpc.bchrpcClient(url, creds);
    }
    GrpcClient.prototype.getMempoolInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.client.getMempoolInfo(new bchrpc.GetMempoolInfoRequest(), function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getRawTransaction = function (_a) {
        var _this = this;
        var hash = _a.hash, reverseOrder = _a.reverseOrder;
        var req = new bchrpc.GetRawTransactionRequest();
        if (reverseOrder)
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })).reverse());
        else
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })));
        return new Promise(function (resolve, reject) {
            _this.client.getRawTransaction(req, function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getTransaction = function (_a) {
        var _this = this;
        var hash = _a.hash, reverseOrder = _a.reverseOrder;
        var req = new bchrpc.GetTransactionRequest();
        if (reverseOrder)
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })).reverse());
        else
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })));
        return new Promise(function (resolve, reject) {
            _this.client.getTransaction(req, function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getAddressUtxos = function (address) {
        var _this = this;
        var req = new bchrpc.GetAddressUnspentOutputsRequest();
        req.setAddress(address);
        return new Promise(function (resolve, reject) {
            _this.client.getAddressUnspentOutputs(req, function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getRawBlock = function (_a) {
        var _this = this;
        var hash = _a.hash, reverseOrder = _a.reverseOrder;
        var req = new bchrpc.GetRawBlockRequest();
        if (reverseOrder)
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })).reverse());
        else
            req.setHash(new Uint8Array(hash.match(/.{1,2}/g).map(function (byte) { return parseInt(byte, 16); })));
        return new Promise(function (resolve, reject) {
            _this.client.getRawBlock(req, function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getBlockInfo = function (index) {
        var _this = this;
        var req = new bchrpc.GetBlockInfoRequest();
        req.setHeight(index);
        return new Promise(function (resolve, reject) {
            _this.client.getBlockInfo(req, function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    GrpcClient.prototype.getBlockchainInfo = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.client.getBlockchainInfo(new bchrpc.GetBlockchainInfoRequest(), function (err, data) {
                if (err !== null)
                    reject(err);
                else
                    resolve(data);
            });
        });
    };
    return GrpcClient;
}());
exports.GrpcClient = GrpcClient;
//# sourceMappingURL=client.js.map